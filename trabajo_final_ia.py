# -*- coding: utf-8 -*-
"""Trabajo_final_IA

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10dI72oXxQV51PydrTlGqdyVdjoOL3fsf
"""

# Script base para Google Colab: Agente de IA Inmobiliario Multimodal

# Paso 1: Instalación de librerías necesarias
!pip install fastapi uvicorn python-multipart pillow transformers --quiet

# Paso 2: Importación de librerías
from fastapi import FastAPI, File, UploadFile, Form
from fastapi.responses import JSONResponse
from fastapi.middleware.cors import CORSMiddleware
from PIL import Image
import io
import uvicorn

# Paso 3: Inicialización de la app FastAPI
app = FastAPI()

# Permitir conexión desde frontend (como V0.dev)
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Paso 4: Simulación de análisis de imagen
def analizar_imagen(image_bytes):
    # Simulación: detectar elementos clave por nombre de archivo
    image = Image.open(io.BytesIO(image_bytes))
    width, height = image.size
    elementos_detectados = []

    if width > 500 and height > 500:
        elementos_detectados.append("terraza")
    if "baño" in image.filename.lower():
        elementos_detectados.append("baño")
    if "cocina" in image.filename.lower():
        elementos_detectados.append("cocina")

    return elementos_detectados or ["elementos no detectados"]

# Paso 5: Endpoint para subir imagen y analizarla
@app.post("/analizar-imagen/")
async def analizar_imagen_endpoint(file: UploadFile = File(...)):
    image_bytes = await file.read()
    elementos = analizar_imagen(image_bytes)
    return JSONResponse(content={"elementos_detectados": elementos})

# Paso 6: Endpoint para iniciar conversación
@app.post("/iniciar-conversacion/")
async def iniciar_conversacion(
    rol: str = Form(...),
    ubicacion: str = Form(...)
):
    if rol.lower() == "agente":
        mensaje = f"Hola agente, estás evaluando un piso en {ubicacion}. ¿Qué tipo de inversión estás considerando?"
    elif rol.lower() == "comprador":
        mensaje = f"Hola comprador, ¿qué aspectos del piso en {ubicacion} te gustaría mejorar para tu comodidad?"
    elif rol.lower() == "propietario":
        mensaje = f"Hola propietario, ¿quieres aumentar el valor del piso en {ubicacion}? ¿Qué reformas has considerado?"
    else:
        mensaje = "Rol no reconocido. Por favor selecciona: agente, comprador o propietario."

    return JSONResponse(content={"mensaje_inicial": mensaje})

# Paso 7: Placeholder para scraping y modelos de lenguaje
@app.get("/proximamente/")
async def proximamente():
    return {"mensaje": "Aquí se integrará scraping web y modelos de lenguaje para recomendaciones avanzadas."}

# Paso 8: Ejecutar servidor (solo si se ejecuta localmente)
# uvicorn.run(app, host="0.0.0.0", port=8000)

print("✅ Script cargado. Ejecuta esta celda en Google Colab y usa ngrok para exponer el servidor si deseas conectarlo a un frontend.")

#######################################################################################################################################################


!pip install streamlit

import streamlit as st
from PIL import Image

# Título de la aplicación
st.title("Agente Inmobiliario IA - Análisis de Pisos")

# Selección del rol del usuario
rol = st.selectbox("Selecciona tu rol:", ["Agente inmobiliario", "Comprador", "Propietario"])

# Ingreso de la ubicación del piso
ubicacion = st.text_input("Ubicación del piso (ej. Vicente Espinel, Madrid)")

# Subida de imagen del piso
imagen = st.file_uploader("Sube una imagen del piso", type=["jpg", "jpeg", "png"])

# Mostrar mensaje personalizado según el rol
if rol and ubicacion:
    if rol == "Agente inmobiliario":
        mensaje = f"Hola, como agente inmobiliario, estás evaluando el piso en {ubicacion} para posibles oportunidades de negocio."
    elif rol == "Comprador":
        mensaje = f"Hola, como comprador, estás interesado en saber qué mejoras necesita el piso en {ubicacion} para estar en condiciones óptimas."
    else:
        mensaje = f"Hola, como propietario, estás buscando recomendaciones para mejorar tu piso en {ubicacion} y aumentar su valor."
    st.info(mensaje)

# Procesamiento simulado de la imagen
if imagen:
    img = Image.open(imagen)
    st.image(img, caption="Imagen del piso cargada", use_column_width=True)

    # Simulación de análisis de imagen
    elementos_detectados = ["terraza", "cocina", "baño"]  # Simulación
    st.success(f"Elementos detectados en la imagen: {', '.join(elementos_detectados)}")

    # Recomendación simulada
    st.markdown("### Recomendación:")
    st.write("Se recomienda reformar la terraza para aumentar el valor del piso. También se sugiere modernizar la cocina si es posible.")